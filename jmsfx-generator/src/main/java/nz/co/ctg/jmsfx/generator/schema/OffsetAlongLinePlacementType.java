//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.04.03 at 04:45:07 PM NZDT 
//


package nz.co.ctg.jmsfx.generator.schema;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for OffsetAlongLinePlacementType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="OffsetAlongLinePlacementType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="BestPositionAlongLine"/>
 *     &lt;enumeration value="BeforeStartOfLine"/>
 *     &lt;enumeration value="AlongLineFromStart"/>
 *     &lt;enumeration value="AlongLineFromEnd"/>
 *     &lt;enumeration value="AfterEndOfLine"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "OffsetAlongLinePlacementType")
@XmlEnum
public enum OffsetAlongLinePlacementType {

    @XmlEnumValue("BestPositionAlongLine")
    BEST_POSITION_ALONG_LINE("BestPositionAlongLine"),
    @XmlEnumValue("BeforeStartOfLine")
    BEFORE_START_OF_LINE("BeforeStartOfLine"),
    @XmlEnumValue("AlongLineFromStart")
    ALONG_LINE_FROM_START("AlongLineFromStart"),
    @XmlEnumValue("AlongLineFromEnd")
    ALONG_LINE_FROM_END("AlongLineFromEnd"),
    @XmlEnumValue("AfterEndOfLine")
    AFTER_END_OF_LINE("AfterEndOfLine");
    private final String value;

    OffsetAlongLinePlacementType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static OffsetAlongLinePlacementType fromValue(String v) {
        for (OffsetAlongLinePlacementType c: OffsetAlongLinePlacementType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
